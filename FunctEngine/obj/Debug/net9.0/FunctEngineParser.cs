//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/peyote/Documents/GitHub/crs/FunctEngine/FunctEngine.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FunctEngine {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class FunctEngineParser : Parser {
	public const int
		FOR=1, WHILE=2, VAR=3, NULL=4, BOOLEAN=5, IDENTIFIER=6, NUMBER=7, STRING=8, 
		GTE=9, LTE=10, EQUALS=11, NOTEQUALS=12, GT=13, LT=14, AND=15, OR=16, ASSIGN=17, 
		ADD=18, SUB=19, MUL=20, DIV=21, LPAREN=22, RPAREN=23, LBRACE=24, RBRACE=25, 
		LBRACK=26, RBRACK=27, SEMI=28, COMMA=29, WS=30, COMMENT=31, BLOCK_COMMENT=32;
	public const int
		RULE_program = 0, RULE_block = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_assignment = 4, RULE_forStatement = 5, RULE_forInit = 6, RULE_forUpdate = 7, 
		RULE_whileStatement = 8, RULE_expression = 9, RULE_orExpression = 10, 
		RULE_andExpression = 11, RULE_comparisonExpression = 12, RULE_addSubExpression = 13, 
		RULE_multDivExpression = 14, RULE_atom = 15, RULE_functionCall = 16, RULE_argumentList = 17, 
		RULE_literal = 18, RULE_arrayLiteral = 19;
	public static readonly string[] ruleNames = {
		"program", "block", "statement", "variableDeclaration", "assignment", 
		"forStatement", "forInit", "forUpdate", "whileStatement", "expression", 
		"orExpression", "andExpression", "comparisonExpression", "addSubExpression", 
		"multDivExpression", "atom", "functionCall", "argumentList", "literal", 
		"arrayLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'while'", "'var'", "'null'", null, null, null, null, "'>='", 
		"'<='", "'=='", "'!='", "'>'", "'<'", "'&&'", "'||'", "'='", "'+'", "'-'", 
		"'*'", "'/'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FOR", "WHILE", "VAR", "NULL", "BOOLEAN", "IDENTIFIER", "NUMBER", 
		"STRING", "GTE", "LTE", "EQUALS", "NOTEQUALS", "GT", "LT", "AND", "OR", 
		"ASSIGN", "ADD", "SUB", "MUL", "DIV", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMI", "COMMA", "WS", "COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FunctEngine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public FunctEngineParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FunctEngineParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; block();
			State = 41; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			State = 52;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; Match(LBRACE);
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FOR) | (1L << WHILE) | (1L << VAR) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 44; statement();
					}
					}
					State = 49;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 50; Match(RBRACE);
				}
				break;
			case FOR:
			case WHILE:
			case VAR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 65;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; variableDeclaration();
				State = 55; Match(SEMI);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; assignment();
				State = 58; Match(SEMI);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60; functionCall();
				State = 61; Match(SEMI);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; forStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 64; whileStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FunctEngineParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(VAR);
			State = 68; Match(IDENTIFIER);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGN) {
				{
				State = 69; Match(ASSIGN);
				State = 70; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FunctEngineParser.IDENTIFIER, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(IDENTIFIER);
			State = 74; Match(ASSIGN);
			State = 75; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForUpdateContext forUpdate() {
			return GetRuleContext<ForUpdateContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(FOR);
			State = 78; Match(LPAREN);
			State = 80;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VAR || _la==IDENTIFIER) {
				{
				State = 79; forInit();
				}
			}

			State = 82; Match(SEMI);
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << BOOLEAN) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING) | (1L << LPAREN) | (1L << LBRACK))) != 0)) {
				{
				State = 83; expression();
				}
			}

			State = 86; Match(SEMI);
			State = 88;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 87; forUpdate();
				}
			}

			State = 90; Match(RPAREN);
			State = 91; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_forInit);
		try {
			State = 95;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; variableDeclaration();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForUpdateContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ForUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forUpdate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterForUpdate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitForUpdate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForUpdate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForUpdateContext forUpdate() {
		ForUpdateContext _localctx = new ForUpdateContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_forUpdate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; assignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(WHILE);
			State = 100; Match(LPAREN);
			State = 101; expression();
			State = 102; Match(RPAREN);
			State = 103; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public OrExpressionContext orExpression() {
			return GetRuleContext<OrExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; orExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public OrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrExpressionContext orExpression() {
		OrExpressionContext _localctx = new OrExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_orExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; andExpression();
			State = 112;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==OR) {
				{
				{
				State = 108; Match(OR);
				State = 109; andExpression();
				}
				}
				State = 114;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public ComparisonExpressionContext[] comparisonExpression() {
			return GetRuleContexts<ComparisonExpressionContext>();
		}
		public ComparisonExpressionContext comparisonExpression(int i) {
			return GetRuleContext<ComparisonExpressionContext>(i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; comparisonExpression();
			State = 120;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AND) {
				{
				{
				State = 116; Match(AND);
				State = 117; comparisonExpression();
				}
				}
				State = 122;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		public AddSubExpressionContext[] addSubExpression() {
			return GetRuleContexts<AddSubExpressionContext>();
		}
		public AddSubExpressionContext addSubExpression(int i) {
			return GetRuleContext<AddSubExpressionContext>(i);
		}
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_comparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; addSubExpression();
			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTE) | (1L << LTE) | (1L << EQUALS) | (1L << NOTEQUALS) | (1L << GT) | (1L << LT))) != 0)) {
				{
				{
				State = 124;
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GTE) | (1L << LTE) | (1L << EQUALS) | (1L << NOTEQUALS) | (1L << GT) | (1L << LT))) != 0)) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 125; addSubExpression();
				}
				}
				State = 130;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddSubExpressionContext : ParserRuleContext {
		public MultDivExpressionContext[] multDivExpression() {
			return GetRuleContexts<MultDivExpressionContext>();
		}
		public MultDivExpressionContext multDivExpression(int i) {
			return GetRuleContext<MultDivExpressionContext>(i);
		}
		public AddSubExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addSubExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterAddSubExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitAddSubExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddSubExpressionContext addSubExpression() {
		AddSubExpressionContext _localctx = new AddSubExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_addSubExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; multDivExpression();
			State = 136;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 132;
				_la = _input.La(1);
				if ( !(_la==ADD || _la==SUB) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 133; multDivExpression();
				}
				}
				State = 138;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultDivExpressionContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public MultDivExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multDivExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterMultDivExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitMultDivExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultDivExpressionContext multDivExpression() {
		MultDivExpressionContext _localctx = new MultDivExpressionContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_multDivExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; atom();
			State = 144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==MUL || _la==DIV) {
				{
				{
				State = 140;
				_la = _input.La(1);
				if ( !(_la==MUL || _la==DIV) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 141; atom();
				}
				}
				State = 146;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(FunctEngineParser.IDENTIFIER, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_atom);
		try {
			State = 154;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 147; Match(LPAREN);
				State = 148; expression();
				State = 149; Match(RPAREN);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; functionCall();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; literal();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 153; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FunctEngineParser.IDENTIFIER, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(IDENTIFIER);
			State = 157; Match(LPAREN);
			State = 159;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << BOOLEAN) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING) | (1L << LPAREN) | (1L << LBRACK))) != 0)) {
				{
				State = 158; argumentList();
				}
			}

			State = 161; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; expression();
			State = 168;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 164; Match(COMMA);
				State = 165; expression();
				}
				}
				State = 170;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(FunctEngineParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(FunctEngineParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(FunctEngineParser.BOOLEAN, 0); }
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(FunctEngineParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_literal);
		try {
			State = 176;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; Match(STRING);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173; Match(BOOLEAN);
				}
				break;
			case LBRACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 174; arrayLiteral();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 175; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFunctEngineListener typedListener = listener as IFunctEngineListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFunctEngineVisitor<TResult> typedVisitor = visitor as IFunctEngineVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178; Match(LBRACK);
			State = 180;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << BOOLEAN) | (1L << IDENTIFIER) | (1L << NUMBER) | (1L << STRING) | (1L << LPAREN) | (1L << LBRACK))) != 0)) {
				{
				State = 179; argumentList();
				}
			}

			State = 182; Match(RBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\"\xBB\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3\x30\n\x3\f\x3\xE\x3\x33\v\x3\x3\x3"+
		"\x3\x3\x5\x3\x37\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\x44\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5J\n\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5\aS\n\a\x3\a\x3\a\x5\aW\n\a"+
		"\x3\a\x3\a\x5\a[\n\a\x3\a\x3\a\x3\a\x3\b\x3\b\x5\b\x62\n\b\x3\t\x3\t\x3"+
		"\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\a\fq\n\f\f\f\xE\f"+
		"t\v\f\x3\r\x3\r\x3\r\a\ry\n\r\f\r\xE\r|\v\r\x3\xE\x3\xE\x3\xE\a\xE\x81"+
		"\n\xE\f\xE\xE\xE\x84\v\xE\x3\xF\x3\xF\x3\xF\a\xF\x89\n\xF\f\xF\xE\xF\x8C"+
		"\v\xF\x3\x10\x3\x10\x3\x10\a\x10\x91\n\x10\f\x10\xE\x10\x94\v\x10\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x9D\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x5\x12\xA2\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\a\x13"+
		"\xA9\n\x13\f\x13\xE\x13\xAC\v\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5"+
		"\x14\xB3\n\x14\x3\x15\x3\x15\x5\x15\xB7\n\x15\x3\x15\x3\x15\x3\x15\x2"+
		"\x2\x2\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2"+
		"\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\x5\x3\x2\v"+
		"\x10\x3\x2\x14\x15\x3\x2\x16\x17\xC0\x2*\x3\x2\x2\x2\x4\x36\x3\x2\x2\x2"+
		"\x6\x43\x3\x2\x2\x2\b\x45\x3\x2\x2\x2\nK\x3\x2\x2\x2\fO\x3\x2\x2\x2\xE"+
		"\x61\x3\x2\x2\x2\x10\x63\x3\x2\x2\x2\x12\x65\x3\x2\x2\x2\x14k\x3\x2\x2"+
		"\x2\x16m\x3\x2\x2\x2\x18u\x3\x2\x2\x2\x1A}\x3\x2\x2\x2\x1C\x85\x3\x2\x2"+
		"\x2\x1E\x8D\x3\x2\x2\x2 \x9C\x3\x2\x2\x2\"\x9E\x3\x2\x2\x2$\xA5\x3\x2"+
		"\x2\x2&\xB2\x3\x2\x2\x2(\xB4\x3\x2\x2\x2*+\x5\x4\x3\x2+,\a\x2\x2\x3,\x3"+
		"\x3\x2\x2\x2-\x31\a\x1A\x2\x2.\x30\x5\x6\x4\x2/.\x3\x2\x2\x2\x30\x33\x3"+
		"\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3\x2\x2\x2\x33"+
		"\x31\x3\x2\x2\x2\x34\x37\a\x1B\x2\x2\x35\x37\x5\x6\x4\x2\x36-\x3\x2\x2"+
		"\x2\x36\x35\x3\x2\x2\x2\x37\x5\x3\x2\x2\x2\x38\x39\x5\b\x5\x2\x39:\a\x1E"+
		"\x2\x2:\x44\x3\x2\x2\x2;<\x5\n\x6\x2<=\a\x1E\x2\x2=\x44\x3\x2\x2\x2>?"+
		"\x5\"\x12\x2?@\a\x1E\x2\x2@\x44\x3\x2\x2\x2\x41\x44\x5\f\a\x2\x42\x44"+
		"\x5\x12\n\x2\x43\x38\x3\x2\x2\x2\x43;\x3\x2\x2\x2\x43>\x3\x2\x2\x2\x43"+
		"\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44\a\x3\x2\x2\x2\x45\x46\a\x5\x2"+
		"\x2\x46I\a\b\x2\x2GH\a\x13\x2\x2HJ\x5\x14\v\x2IG\x3\x2\x2\x2IJ\x3\x2\x2"+
		"\x2J\t\x3\x2\x2\x2KL\a\b\x2\x2LM\a\x13\x2\x2MN\x5\x14\v\x2N\v\x3\x2\x2"+
		"\x2OP\a\x3\x2\x2PR\a\x18\x2\x2QS\x5\xE\b\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2"+
		"ST\x3\x2\x2\x2TV\a\x1E\x2\x2UW\x5\x14\v\x2VU\x3\x2\x2\x2VW\x3\x2\x2\x2"+
		"WX\x3\x2\x2\x2XZ\a\x1E\x2\x2Y[\x5\x10\t\x2ZY\x3\x2\x2\x2Z[\x3\x2\x2\x2"+
		"[\\\x3\x2\x2\x2\\]\a\x19\x2\x2]^\x5\x4\x3\x2^\r\x3\x2\x2\x2_\x62\x5\b"+
		"\x5\x2`\x62\x5\n\x6\x2\x61_\x3\x2\x2\x2\x61`\x3\x2\x2\x2\x62\xF\x3\x2"+
		"\x2\x2\x63\x64\x5\n\x6\x2\x64\x11\x3\x2\x2\x2\x65\x66\a\x4\x2\x2\x66g"+
		"\a\x18\x2\x2gh\x5\x14\v\x2hi\a\x19\x2\x2ij\x5\x4\x3\x2j\x13\x3\x2\x2\x2"+
		"kl\x5\x16\f\x2l\x15\x3\x2\x2\x2mr\x5\x18\r\x2no\a\x12\x2\x2oq\x5\x18\r"+
		"\x2pn\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2s\x17\x3\x2"+
		"\x2\x2tr\x3\x2\x2\x2uz\x5\x1A\xE\x2vw\a\x11\x2\x2wy\x5\x1A\xE\x2xv\x3"+
		"\x2\x2\x2y|\x3\x2\x2\x2zx\x3\x2\x2\x2z{\x3\x2\x2\x2{\x19\x3\x2\x2\x2|"+
		"z\x3\x2\x2\x2}\x82\x5\x1C\xF\x2~\x7F\t\x2\x2\x2\x7F\x81\x5\x1C\xF\x2\x80"+
		"~\x3\x2\x2\x2\x81\x84\x3\x2\x2\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2"+
		"\x2\x83\x1B\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x85\x8A\x5\x1E\x10\x2\x86"+
		"\x87\t\x3\x2\x2\x87\x89\x5\x1E\x10\x2\x88\x86\x3\x2\x2\x2\x89\x8C\x3\x2"+
		"\x2\x2\x8A\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x1D\x3\x2\x2\x2\x8C"+
		"\x8A\x3\x2\x2\x2\x8D\x92\x5 \x11\x2\x8E\x8F\t\x4\x2\x2\x8F\x91\x5 \x11"+
		"\x2\x90\x8E\x3\x2\x2\x2\x91\x94\x3\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92\x93"+
		"\x3\x2\x2\x2\x93\x1F\x3\x2\x2\x2\x94\x92\x3\x2\x2\x2\x95\x96\a\x18\x2"+
		"\x2\x96\x97\x5\x14\v\x2\x97\x98\a\x19\x2\x2\x98\x9D\x3\x2\x2\x2\x99\x9D"+
		"\x5\"\x12\x2\x9A\x9D\x5&\x14\x2\x9B\x9D\a\b\x2\x2\x9C\x95\x3\x2\x2\x2"+
		"\x9C\x99\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D!\x3\x2"+
		"\x2\x2\x9E\x9F\a\b\x2\x2\x9F\xA1\a\x18\x2\x2\xA0\xA2\x5$\x13\x2\xA1\xA0"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA4\a\x19\x2"+
		"\x2\xA4#\x3\x2\x2\x2\xA5\xAA\x5\x14\v\x2\xA6\xA7\a\x1F\x2\x2\xA7\xA9\x5"+
		"\x14\v\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2"+
		"\xAA\xAB\x3\x2\x2\x2\xAB%\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xB3\a\t"+
		"\x2\x2\xAE\xB3\a\n\x2\x2\xAF\xB3\a\a\x2\x2\xB0\xB3\x5(\x15\x2\xB1\xB3"+
		"\a\x6\x2\x2\xB2\xAD\x3\x2\x2\x2\xB2\xAE\x3\x2\x2\x2\xB2\xAF\x3\x2\x2\x2"+
		"\xB2\xB0\x3\x2\x2\x2\xB2\xB1\x3\x2\x2\x2\xB3\'\x3\x2\x2\x2\xB4\xB6\a\x1C"+
		"\x2\x2\xB5\xB7\x5$\x13\x2\xB6\xB5\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7"+
		"\xB8\x3\x2\x2\x2\xB8\xB9\a\x1D\x2\x2\xB9)\x3\x2\x2\x2\x14\x31\x36\x43"+
		"IRVZ\x61rz\x82\x8A\x92\x9C\xA1\xAA\xB2\xB6";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace FunctEngine
