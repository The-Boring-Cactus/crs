//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/peyote/Documents/GitHub/crs/FunctEngine/FunctEngine.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FunctEngine {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="FunctEngineParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IFunctEngineListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] FunctEngineParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] FunctEngineParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] FunctEngineParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] FunctEngineParser.BlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] FunctEngineParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] FunctEngineParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] FunctEngineParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] FunctEngineParser.VariableDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] FunctEngineParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] FunctEngineParser.AssignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] FunctEngineParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] FunctEngineParser.ForStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForInit([NotNull] FunctEngineParser.ForInitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.forInit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForInit([NotNull] FunctEngineParser.ForInitContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.forUpdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForUpdate([NotNull] FunctEngineParser.ForUpdateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.forUpdate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForUpdate([NotNull] FunctEngineParser.ForUpdateContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] FunctEngineParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] FunctEngineParser.WhileStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] FunctEngineParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] FunctEngineParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.orExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] FunctEngineParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.orExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] FunctEngineParser.OrExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.andExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] FunctEngineParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.andExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] FunctEngineParser.AndExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterComparisonExpression([NotNull] FunctEngineParser.ComparisonExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.comparisonExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitComparisonExpression([NotNull] FunctEngineParser.ComparisonExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.addSubExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSubExpression([NotNull] FunctEngineParser.AddSubExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.addSubExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSubExpression([NotNull] FunctEngineParser.AddSubExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.multDivExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultDivExpression([NotNull] FunctEngineParser.MultDivExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.multDivExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultDivExpression([NotNull] FunctEngineParser.MultDivExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom([NotNull] FunctEngineParser.AtomContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom([NotNull] FunctEngineParser.AtomContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] FunctEngineParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] FunctEngineParser.FunctionCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] FunctEngineParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] FunctEngineParser.ArgumentListContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] FunctEngineParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] FunctEngineParser.LiteralContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayLiteral([NotNull] FunctEngineParser.ArrayLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.arrayLiteral"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayLiteral([NotNull] FunctEngineParser.ArrayLiteralContext context);
}
} // namespace FunctEngine
