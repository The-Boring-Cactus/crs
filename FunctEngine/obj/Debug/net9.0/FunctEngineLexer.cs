//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/peyote/Documents/GitHub/crs/FunctEngine/FunctEngine.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FunctEngine {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class FunctEngineLexer : Lexer {
	public const int
		FOR=1, WHILE=2, VAR=3, NULL=4, BOOLEAN=5, IDENTIFIER=6, NUMBER=7, STRING=8, 
		GTE=9, LTE=10, EQUALS=11, NOTEQUALS=12, GT=13, LT=14, AND=15, OR=16, ASSIGN=17, 
		ADD=18, SUB=19, MUL=20, DIV=21, LPAREN=22, RPAREN=23, LBRACE=24, RBRACE=25, 
		LBRACK=26, RBRACK=27, SEMI=28, COMMA=29, WS=30, COMMENT=31, BLOCK_COMMENT=32;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"FOR", "WHILE", "VAR", "NULL", "BOOLEAN", "IDENTIFIER", "NUMBER", "STRING", 
		"GTE", "LTE", "EQUALS", "NOTEQUALS", "GT", "LT", "AND", "OR", "ASSIGN", 
		"ADD", "SUB", "MUL", "DIV", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
		"RBRACK", "SEMI", "COMMA", "WS", "COMMENT", "BLOCK_COMMENT"
	};


	public FunctEngineLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'for'", "'while'", "'var'", "'null'", null, null, null, null, "'>='", 
		"'<='", "'=='", "'!='", "'>'", "'<'", "'&&'", "'||'", "'='", "'+'", "'-'", 
		"'*'", "'/'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FOR", "WHILE", "VAR", "NULL", "BOOLEAN", "IDENTIFIER", "NUMBER", 
		"STRING", "GTE", "LTE", "EQUALS", "NOTEQUALS", "GT", "LT", "AND", "OR", 
		"ASSIGN", "ADD", "SUB", "MUL", "DIV", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
		"LBRACK", "RBRACK", "SEMI", "COMMA", "WS", "COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FunctEngine.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\"\xDB\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6`\n\x6\x3\a\x3\a\a\a\x64\n\a\f"+
		"\a\xE\ag\v\a\x3\b\x6\bj\n\b\r\b\xE\bk\x3\b\x3\b\x6\bp\n\b\r\b\xE\bq\x5"+
		"\bt\n\b\x3\t\x3\t\x3\t\x3\t\a\tz\n\t\f\t\xE\t}\v\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\a\t\x84\n\t\f\t\xE\t\x87\v\t\x3\t\x5\t\x8A\n\t\x3\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1E\x3\x1E\x3\x1F\x6\x1F\xBD\n\x1F\r\x1F\xE\x1F\xBE\x3\x1F\x3\x1F\x3"+
		" \x3 \x3 \x3 \a \xC7\n \f \xE \xCA\v \x3 \x3 \x3!\x3!\x3!\x3!\a!\xD2\n"+
		"!\f!\xE!\xD5\v!\x3!\x3!\x3!\x3!\x3!\x3\xD3\x2\x2\"\x3\x2\x3\x5\x2\x4\a"+
		"\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2"+
		"\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'"+
		"\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C"+
		"\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x3\x2\t\x5\x2\x43\\"+
		"\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x3\x2\x32;\x6\x2\f\f\xF\xF"+
		"$$^^\x6\x2\f\f\xF\xF))^^\x5\x2\v\f\xF\xF\"\"\x4\x2\f\f\xF\xF\xE7\x2\x3"+
		"\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v"+
		"\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2"+
		"\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2"+
		"\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2"+
		"\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2"+
		"\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2"+
		"\x3\x43\x3\x2\x2\x2\x5G\x3\x2\x2\x2\aM\x3\x2\x2\x2\tQ\x3\x2\x2\x2\v_\x3"+
		"\x2\x2\x2\r\x61\x3\x2\x2\x2\xFi\x3\x2\x2\x2\x11\x89\x3\x2\x2\x2\x13\x8B"+
		"\x3\x2\x2\x2\x15\x8E\x3\x2\x2\x2\x17\x91\x3\x2\x2\x2\x19\x94\x3\x2\x2"+
		"\x2\x1B\x97\x3\x2\x2\x2\x1D\x99\x3\x2\x2\x2\x1F\x9B\x3\x2\x2\x2!\x9E\x3"+
		"\x2\x2\x2#\xA1\x3\x2\x2\x2%\xA3\x3\x2\x2\x2\'\xA5\x3\x2\x2\x2)\xA7\x3"+
		"\x2\x2\x2+\xA9\x3\x2\x2\x2-\xAB\x3\x2\x2\x2/\xAD\x3\x2\x2\x2\x31\xAF\x3"+
		"\x2\x2\x2\x33\xB1\x3\x2\x2\x2\x35\xB3\x3\x2\x2\x2\x37\xB5\x3\x2\x2\x2"+
		"\x39\xB7\x3\x2\x2\x2;\xB9\x3\x2\x2\x2=\xBC\x3\x2\x2\x2?\xC2\x3\x2\x2\x2"+
		"\x41\xCD\x3\x2\x2\x2\x43\x44\ah\x2\x2\x44\x45\aq\x2\x2\x45\x46\at\x2\x2"+
		"\x46\x4\x3\x2\x2\x2GH\ay\x2\x2HI\aj\x2\x2IJ\ak\x2\x2JK\an\x2\x2KL\ag\x2"+
		"\x2L\x6\x3\x2\x2\x2MN\ax\x2\x2NO\a\x63\x2\x2OP\at\x2\x2P\b\x3\x2\x2\x2"+
		"QR\ap\x2\x2RS\aw\x2\x2ST\an\x2\x2TU\an\x2\x2U\n\x3\x2\x2\x2VW\av\x2\x2"+
		"WX\at\x2\x2XY\aw\x2\x2Y`\ag\x2\x2Z[\ah\x2\x2[\\\a\x63\x2\x2\\]\an\x2\x2"+
		"]^\au\x2\x2^`\ag\x2\x2_V\x3\x2\x2\x2_Z\x3\x2\x2\x2`\f\x3\x2\x2\x2\x61"+
		"\x65\t\x2\x2\x2\x62\x64\t\x3\x2\x2\x63\x62\x3\x2\x2\x2\x64g\x3\x2\x2\x2"+
		"\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66\xE\x3\x2\x2\x2g\x65\x3\x2"+
		"\x2\x2hj\t\x4\x2\x2ih\x3\x2\x2\x2jk\x3\x2\x2\x2ki\x3\x2\x2\x2kl\x3\x2"+
		"\x2\x2ls\x3\x2\x2\x2mo\a\x30\x2\x2np\t\x4\x2\x2on\x3\x2\x2\x2pq\x3\x2"+
		"\x2\x2qo\x3\x2\x2\x2qr\x3\x2\x2\x2rt\x3\x2\x2\x2sm\x3\x2\x2\x2st\x3\x2"+
		"\x2\x2t\x10\x3\x2\x2\x2u{\a$\x2\x2vz\n\x5\x2\x2wx\a^\x2\x2xz\v\x2\x2\x2"+
		"yv\x3\x2\x2\x2yw\x3\x2\x2\x2z}\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2"+
		"|~\x3\x2\x2\x2}{\x3\x2\x2\x2~\x8A\a$\x2\x2\x7F\x85\a)\x2\x2\x80\x84\n"+
		"\x6\x2\x2\x81\x82\a^\x2\x2\x82\x84\v\x2\x2\x2\x83\x80\x3\x2\x2\x2\x83"+
		"\x81\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3\x2"+
		"\x2\x2\x86\x88\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x8A\a)\x2\x2\x89u\x3"+
		"\x2\x2\x2\x89\x7F\x3\x2\x2\x2\x8A\x12\x3\x2\x2\x2\x8B\x8C\a@\x2\x2\x8C"+
		"\x8D\a?\x2\x2\x8D\x14\x3\x2\x2\x2\x8E\x8F\a>\x2\x2\x8F\x90\a?\x2\x2\x90"+
		"\x16\x3\x2\x2\x2\x91\x92\a?\x2\x2\x92\x93\a?\x2\x2\x93\x18\x3\x2\x2\x2"+
		"\x94\x95\a#\x2\x2\x95\x96\a?\x2\x2\x96\x1A\x3\x2\x2\x2\x97\x98\a@\x2\x2"+
		"\x98\x1C\x3\x2\x2\x2\x99\x9A\a>\x2\x2\x9A\x1E\x3\x2\x2\x2\x9B\x9C\a(\x2"+
		"\x2\x9C\x9D\a(\x2\x2\x9D \x3\x2\x2\x2\x9E\x9F\a~\x2\x2\x9F\xA0\a~\x2\x2"+
		"\xA0\"\x3\x2\x2\x2\xA1\xA2\a?\x2\x2\xA2$\x3\x2\x2\x2\xA3\xA4\a-\x2\x2"+
		"\xA4&\x3\x2\x2\x2\xA5\xA6\a/\x2\x2\xA6(\x3\x2\x2\x2\xA7\xA8\a,\x2\x2\xA8"+
		"*\x3\x2\x2\x2\xA9\xAA\a\x31\x2\x2\xAA,\x3\x2\x2\x2\xAB\xAC\a*\x2\x2\xAC"+
		".\x3\x2\x2\x2\xAD\xAE\a+\x2\x2\xAE\x30\x3\x2\x2\x2\xAF\xB0\a}\x2\x2\xB0"+
		"\x32\x3\x2\x2\x2\xB1\xB2\a\x7F\x2\x2\xB2\x34\x3\x2\x2\x2\xB3\xB4\a]\x2"+
		"\x2\xB4\x36\x3\x2\x2\x2\xB5\xB6\a_\x2\x2\xB6\x38\x3\x2\x2\x2\xB7\xB8\a"+
		"=\x2\x2\xB8:\x3\x2\x2\x2\xB9\xBA\a.\x2\x2\xBA<\x3\x2\x2\x2\xBB\xBD\t\a"+
		"\x2\x2\xBC\xBB\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBC\x3\x2\x2\x2\xBE"+
		"\xBF\x3\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\b\x1F\x2\x2\xC1>\x3\x2\x2"+
		"\x2\xC2\xC3\a\x31\x2\x2\xC3\xC4\a\x31\x2\x2\xC4\xC8\x3\x2\x2\x2\xC5\xC7"+
		"\n\b\x2\x2\xC6\xC5\x3\x2\x2\x2\xC7\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2"+
		"\xC8\xC9\x3\x2\x2\x2\xC9\xCB\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\b"+
		" \x2\x2\xCC@\x3\x2\x2\x2\xCD\xCE\a\x31\x2\x2\xCE\xCF\a,\x2\x2\xCF\xD3"+
		"\x3\x2\x2\x2\xD0\xD2\v\x2\x2\x2\xD1\xD0\x3\x2\x2\x2\xD2\xD5\x3\x2\x2\x2"+
		"\xD3\xD4\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD3\x3"+
		"\x2\x2\x2\xD6\xD7\a,\x2\x2\xD7\xD8\a\x31\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9"+
		"\xDA\b!\x2\x2\xDA\x42\x3\x2\x2\x2\x10\x2_\x65kqsy{\x83\x85\x89\xBE\xC8"+
		"\xD3\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace FunctEngine
