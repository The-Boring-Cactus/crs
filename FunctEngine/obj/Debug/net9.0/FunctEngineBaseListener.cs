//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/peyote/Documents/GitHub/crs/FunctEngine/FunctEngine.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FunctEngine {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IFunctEngineListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class FunctEngineBaseListener : IFunctEngineListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] FunctEngineParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] FunctEngineParser.ProgramContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] FunctEngineParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] FunctEngineParser.BlockContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] FunctEngineParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] FunctEngineParser.StatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] FunctEngineParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] FunctEngineParser.VariableDeclarationContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] FunctEngineParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] FunctEngineParser.AssignmentContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] FunctEngineParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] FunctEngineParser.ForStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForInit([NotNull] FunctEngineParser.ForInitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.forInit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForInit([NotNull] FunctEngineParser.ForInitContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForUpdate([NotNull] FunctEngineParser.ForUpdateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.forUpdate"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForUpdate([NotNull] FunctEngineParser.ForUpdateContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] FunctEngineParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] FunctEngineParser.WhileStatementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] FunctEngineParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] FunctEngineParser.ExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.orExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrExpression([NotNull] FunctEngineParser.OrExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.orExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrExpression([NotNull] FunctEngineParser.OrExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.andExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndExpression([NotNull] FunctEngineParser.AndExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.andExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndExpression([NotNull] FunctEngineParser.AndExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.comparisonExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterComparisonExpression([NotNull] FunctEngineParser.ComparisonExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.comparisonExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitComparisonExpression([NotNull] FunctEngineParser.ComparisonExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.addSubExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddSubExpression([NotNull] FunctEngineParser.AddSubExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.addSubExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddSubExpression([NotNull] FunctEngineParser.AddSubExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.multDivExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultDivExpression([NotNull] FunctEngineParser.MultDivExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.multDivExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultDivExpression([NotNull] FunctEngineParser.MultDivExpressionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtom([NotNull] FunctEngineParser.AtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtom([NotNull] FunctEngineParser.AtomContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] FunctEngineParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] FunctEngineParser.FunctionCallContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] FunctEngineParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] FunctEngineParser.ArgumentListContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] FunctEngineParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] FunctEngineParser.LiteralContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="FunctEngineParser.arrayLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayLiteral([NotNull] FunctEngineParser.ArrayLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FunctEngineParser.arrayLiteral"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayLiteral([NotNull] FunctEngineParser.ArrayLiteralContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace FunctEngine
